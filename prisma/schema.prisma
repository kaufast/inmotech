generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   @map("password_hash")
  firstName String?  @map("first_name")
  lastName  String?  @map("last_name")
  isVerified Boolean @default(false) @map("is_verified")
  isAdmin   Boolean @default(false) @map("is_admin")
  isActive  Boolean  @default(true) @map("is_active")
  kycStatus String? @map("kyc_status") // 'PENDING', 'APPROVED', 'REJECTED'
  passwordResetToken String? @map("password_reset_token")
  passwordResetExpiry DateTime? @map("password_reset_expiry")
  emailVerificationToken String? @map("email_verification_token")
  emailVerificationExpiry DateTime? @map("email_verification_expiry")
  emailVerificationReminders Int @default(0) @map("email_verification_reminders")
  lastVerificationEmailSent DateTime? @map("last_verification_email_sent")
  lastLogin DateTime? @map("last_login")
  loginAttempts Int @default(0) @map("login_attempts")
  lockedUntil DateTime? @map("locked_until")
  
  // Two-Factor Authentication
  twoFactorSecret String? @map("two_factor_secret")
  twoFactorEnabled Boolean @default(false) @map("two_factor_enabled")
  twoFactorBackupCodes String[] @default([]) @map("two_factor_backup_codes")
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  refreshTokens RefreshToken[]
  userSessions UserSession[]
  investments Investment[]
  kycSubmissions KycSubmission[]
  createdProjects Project[]
  preferences UserPreference?
  watchlist UserWatchlist[]
  alerts UserAlert[]
  portfolioSnapshots PortfolioSnapshot[]
  userRoles UserRole[]
  userAuditLogs AuditLog[] @relation("UserAuditLogs")
  adminAuditLogs AuditLog[] @relation("AdminAuditLogs")
  
  // Property Relations
  ownedProperties Property[] @relation("PropertyOwner")
  managedProperties Property[] @relation("PropertyAgent")
  propertyWatchlist PropertyWatchlist[] @relation("PropertyWatchlistUser")

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  isRevoked Boolean  @default(false) @map("is_revoked")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model UserSession {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  sessionToken  String   @unique @map("session_token")
  deviceInfo    Json     @map("device_info") // OS, browser, version
  deviceName    String?  @map("device_name")
  deviceType    String?  @map("device_type") // mobile, desktop, tablet
  browserName   String?  @map("browser_name")
  browserVersion String? @map("browser_version")
  osName        String?  @map("os_name")
  osVersion     String?  @map("os_version")
  ipAddress     String   @map("ip_address")
  userAgent     String   @map("user_agent")
  location      Json?    @map("location") // City, country, timezone
  lastActivity  DateTime @default(now()) @map("last_activity")
  isActive      Boolean  @default(true) @map("is_active")
  expiresAt     DateTime @map("expires_at")
  createdAt     DateTime @default(now()) @map("created_at")
  terminatedAt  DateTime? @map("terminated_at")
  terminatedBy  String?   @map("terminated_by")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model Project {
  id               String   @id @default(cuid())
  title            String
  description      String
  location         String
  targetAmount     Float    @map("target_amount")
  currency         String   @default("EUR")
  expectedReturn   Float    @map("expected_return")
  duration         Int      // months
  riskLevel        String   @map("risk_level")
  propertyType     String   @map("property_type")
  minimumInvestment Float   @default(1000) @map("minimum_investment")
  images           String[] @default([])
  documents        String[] @default([])
  milestones       Json[]   @default([])
  status           String   @default("ACTIVE")
  createdBy        String   @map("created_by")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  creator User @relation(fields: [createdBy], references: [id])
  investments Investment[]
  watchlistedBy UserWatchlist[]
  alerts UserAlert[]

  @@map("projects")
}

model Investment {
  id                    String    @id @default(cuid())
  userId                String    @map("user_id")
  projectId             String    @map("project_id")
  amount                Float
  currency              String    @default("EUR")
  status                String    @default("PENDING")
  paymentMethod         String    @map("payment_method")
  paymentTransactionId  String?   @map("payment_transaction_id")
  escrowTransactionId   String?   @map("escrow_transaction_id")
  failureReason         String?   @map("failure_reason")
  confirmedAt           DateTime? @map("confirmed_at")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])
  escrowTransaction EscrowTransaction?

  @@map("investments")
}

model KycSubmission {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  firstName         String    @map("first_name")
  lastName          String    @map("last_name")
  dateOfBirth       DateTime  @map("date_of_birth")
  nationality       String
  email             String
  phone             String
  address           Json
  identityDocument  Json      @map("identity_document")
  addressProof      Json      @map("address_proof")
  investmentExperience String @map("investment_experience")
  estimatedNetWorth Float     @map("estimated_net_worth")
  sourceOfFunds     String    @map("source_of_funds")
  pep               Boolean   @default(false)
  taxResident       String[]  @map("tax_resident")
  status            String    @default("PENDING")
  verificationId    String?   @map("verification_id")
  confidence        Float?
  rejectionReasons  String[]  @map("rejection_reasons") @default([])
  verifiedAt        DateTime? @map("verified_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("kyc_submissions")
}

model EscrowTransaction {
  id              String    @id @default(cuid())
  investmentId    String    @unique @map("investment_id")
  depositId       String?   @map("deposit_id")
  amount          Float
  currency        String    @default("EUR")
  status          String    @default("CREATED")
  blockchainTxHash String?  @map("blockchain_tx_hash")
  releaseTime     DateTime  @map("release_time")
  releasedAt      DateTime? @map("released_at")
  refundedAt      DateTime? @map("refunded_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  investment Investment @relation(fields: [investmentId], references: [id])

  @@map("escrow_transactions")
}

// User preferences and personalization
model UserPreference {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  preferences   Json     // Investment goals, risk tolerance, preferred locations, currencies, etc.
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@unique([userId])
  @@map("user_preferences")
}

// User watchlist/favorites
model UserWatchlist {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  projectId String   @map("project_id")
  addedAt   DateTime @default(now()) @map("added_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
  @@map("user_watchlist")
}

// User alerts and notifications
model UserAlert {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  projectId  String?  @map("project_id")
  alertType  String   @map("alert_type") // price_drop, funding_milestone, new_projects, etc.
  threshold  Float?   // Price threshold or percentage
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  user    User     @relation(fields: [userId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])

  @@map("user_alerts")
}

// Portfolio snapshots for historical tracking
model PortfolioSnapshot {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  totalValue   Float    @map("total_value")
  totalReturns Float    @map("total_returns")
  currency     String   @default("EUR")
  snapshotDate DateTime @map("snapshot_date")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("portfolio_snapshots")
}

// RBAC System Models
model Role {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., 'admin', 'investor', 'fund_manager', 'analyst'
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  userRoles       UserRole[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., 'projects:read', 'investments:create', 'users:manage'
  resource    String   // e.g., 'projects', 'investments', 'users', 'analytics'
  action      String   // e.g., 'create', 'read', 'update', 'delete', 'manage'
  description String?
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  rolePermissions RolePermission[]

  @@unique([resource, action])
  @@map("permissions")
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  roleId    String   @map("role_id")
  assignedBy String? @map("assigned_by") // User ID who assigned this role
  assignedAt DateTime @default(now()) @map("assigned_at")
  expiresAt  DateTime? @map("expires_at") // Optional role expiration
  isActive   Boolean  @default(true) @map("is_active")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  id           String   @id @default(cuid())
  roleId       String   @map("role_id")
  permissionId String   @map("permission_id")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model AuditLog {
  id          String   @id @default(cuid())
  eventType   String   @map("event_type") // login, logout, password_change, permission_change, etc.
  eventAction String   @map("event_action") // success, failure, blocked, etc.
  entityType  String?  @map("entity_type") // user, role, permission, session, etc.
  entityId    String?  @map("entity_id") // ID of the affected entity
  userId      String?  @map("user_id") // User who performed the action
  adminId     String?  @map("admin_id") // Admin who performed the action (if different from user)
  ipAddress   String   @map("ip_address")
  userAgent   String   @map("user_agent")
  location    Json?    @map("location") // City, country from IP geolocation
  metadata    Json?    @map("metadata") // Additional event-specific data
  errorMessage String? @map("error_message") // Error details if action failed
  severity    String   @default("info") @map("severity") // info, warning, error, critical
  createdAt   DateTime @default(now()) @map("created_at")
  
  // Relations
  user  User? @relation("UserAuditLogs", fields: [userId], references: [id], onDelete: SetNull)
  admin User? @relation("AdminAuditLogs", fields: [adminId], references: [id], onDelete: SetNull)
  
  // Indexes for efficient querying
  @@index([eventType, createdAt])
  @@index([userId, createdAt])
  @@index([adminId, createdAt])
  @@index([severity, createdAt])
  @@index([ipAddress, createdAt])
  @@index([entityType, entityId])
  
  @@map("audit_logs")
}

// Property Management System
model Property {
  id                String   @id @default(cuid())
  title             String
  description       String?
  propertyType      String   @map("property_type") // apartment, house, commercial, office, warehouse
  listingType       String   @map("listing_type") // sale, rent, both
  status            String   @default("ACTIVE") // ACTIVE, SOLD, RENTED, PENDING, INACTIVE
  
  // Location
  address           String
  city              String
  state             String?
  country           String   @default("Spain")
  postalCode        String   @map("postal_code")
  latitude          Float?
  longitude         Float?
  neighborhood      String?
  
  // Property Details
  bedrooms          Int?
  bathrooms         Int?
  totalArea         Float?   @map("total_area") // in square meters
  livingArea        Float?   @map("living_area") // in square meters
  plotSize          Float?   @map("plot_size") // in square meters for houses
  floor             Int?     // floor number for apartments
  totalFloors       Int?     @map("total_floors")
  yearBuilt         Int?     @map("year_built")
  
  // Pricing
  salePrice         Float?   @map("sale_price")
  rentPrice         Float?   @map("rent_price") // monthly rent
  currency          String   @default("EUR")
  pricePerSqm       Float?   @map("price_per_sqm")
  
  // Property Features
  features          Json?    // Pool, garage, terrace, elevator, AC, heating, etc.
  amenities         Json?    // Nearby schools, hospitals, transport, shops, etc.
  condition         String?  // excellent, good, needs_renovation, new_construction
  energyRating      String?  @map("energy_rating") // A, B, C, D, E, F, G
  
  // Media and Documents
  images            String[] @default([])
  floorPlans        String[] @default([]) @map("floor_plans")
  documents         String[] @default([])
  virtualTourUrl    String?  @map("virtual_tour_url")
  
  // Ownership and Management
  ownerId           String   @map("owner_id")
  agentId           String?  @map("agent_id") // Real estate agent managing the property
  
  // Investment Information (if applicable)
  isInvestmentProperty Boolean @default(false) @map("is_investment_property")
  expectedRoi       Float?   @map("expected_roi") // Expected return on investment
  rentalYield       Float?   @map("rental_yield")
  
  // Visibility and Marketing
  isFeatured        Boolean  @default(false) @map("is_featured")
  isPublished       Boolean  @default(true) @map("is_published")
  publishedAt       DateTime? @map("published_at")
  views             Int      @default(0)
  inquiries         Int      @default(0)
  
  // Timestamps
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relations
  owner             User              @relation("PropertyOwner", fields: [ownerId], references: [id])
  agent             User?             @relation("PropertyAgent", fields: [agentId], references: [id])
  inquiries_list    PropertyInquiry[]
  viewings          PropertyViewing[]
  watchlistedBy     PropertyWatchlist[]
  
  // Search and filter indexes
  @@index([propertyType, city])
  @@index([listingType, status])
  @@index([city, propertyType, listingType])
  @@index([salePrice, rentPrice])
  @@index([bedrooms, bathrooms])
  @@index([isPublished, status])
  @@index([ownerId])
  @@index([agentId])
  
  @@map("properties")
}

model PropertyInquiry {
  id            String   @id @default(cuid())
  propertyId    String   @map("property_id")
  inquirerName  String   @map("inquirer_name")
  inquirerEmail String   @map("inquirer_email")
  inquirerPhone String?  @map("inquirer_phone")
  message       String
  inquiryType   String   @map("inquiry_type") // general, viewing, price_negotiation, documents
  status        String   @default("PENDING") // PENDING, RESPONDED, CLOSED
  responseMessage String? @map("response_message")
  respondedAt   DateTime? @map("responded_at")
  createdAt     DateTime @default(now()) @map("created_at")
  
  // Relations
  property      Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@index([propertyId, status])
  @@index([inquirerEmail])
  @@index([createdAt])
  
  @@map("property_inquiries")
}

model PropertyViewing {
  id              String   @id @default(cuid())
  propertyId      String   @map("property_id")
  viewerName      String   @map("viewer_name")
  viewerEmail     String   @map("viewer_email")
  viewerPhone     String?  @map("viewer_phone")
  scheduledDate   DateTime @map("scheduled_date")
  duration        Int      @default(60) // in minutes
  status          String   @default("SCHEDULED") // SCHEDULED, CONFIRMED, COMPLETED, CANCELLED, NO_SHOW
  notes           String?
  agentNotes      String?  @map("agent_notes")
  completedAt     DateTime? @map("completed_at")
  createdAt       DateTime @default(now()) @map("created_at")
  
  // Relations
  property        Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@index([propertyId, scheduledDate])
  @@index([viewerEmail])
  @@index([status])
  
  @@map("property_viewings")
}

model PropertyWatchlist {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  propertyId String   @map("property_id")
  addedAt    DateTime @default(now()) @map("added_at")
  notes      String?
  
  // Relations
  user       User     @relation("PropertyWatchlistUser", fields: [userId], references: [id], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@unique([userId, propertyId])
  @@index([userId])
  @@index([propertyId])
  
  @@map("property_watchlist")
}
