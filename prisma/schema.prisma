generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String? @map("first_name")
  lastName  String? @map("last_name")
  isVerified Boolean @default(false) @map("is_verified")
  isAdmin   Boolean @default(false) @map("is_admin")
  kycStatus String? @map("kyc_status") // 'PENDING', 'APPROVED', 'REJECTED'
  passwordResetToken String? @map("password_reset_token")
  passwordResetExpiry DateTime? @map("password_reset_expiry")
  emailVerificationToken String? @map("email_verification_token")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  refreshTokens RefreshToken[]
  investments Investment[]
  kycSubmissions KycSubmission[]
  createdProjects Project[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  isRevoked Boolean  @default(false) @map("is_revoked")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Project {
  id               String   @id @default(cuid())
  title            String
  description      String
  location         String
  targetAmount     Float    @map("target_amount")
  currency         String   @default("EUR")
  expectedReturn   Float    @map("expected_return")
  duration         Int      // months
  riskLevel        String   @map("risk_level")
  propertyType     String   @map("property_type")
  minimumInvestment Float   @default(1000) @map("minimum_investment")
  images           String[] @default([])
  documents        String[] @default([])
  milestones       Json[]   @default([])
  status           String   @default("ACTIVE")
  createdBy        String   @map("created_by")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  creator User @relation(fields: [createdBy], references: [id])
  investments Investment[]

  @@map("projects")
}

model Investment {
  id                    String    @id @default(cuid())
  userId                String    @map("user_id")
  projectId             String    @map("project_id")
  amount                Float
  currency              String    @default("EUR")
  status                String    @default("PENDING")
  paymentMethod         String    @map("payment_method")
  paymentTransactionId  String?   @map("payment_transaction_id")
  escrowTransactionId   String?   @map("escrow_transaction_id")
  failureReason         String?   @map("failure_reason")
  confirmedAt           DateTime? @map("confirmed_at")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])
  escrowTransaction EscrowTransaction?

  @@map("investments")
}

model KycSubmission {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  firstName         String    @map("first_name")
  lastName          String    @map("last_name")
  dateOfBirth       DateTime  @map("date_of_birth")
  nationality       String
  email             String
  phone             String
  address           Json
  identityDocument  Json      @map("identity_document")
  addressProof      Json      @map("address_proof")
  investmentExperience String @map("investment_experience")
  estimatedNetWorth Float     @map("estimated_net_worth")
  sourceOfFunds     String    @map("source_of_funds")
  pep               Boolean   @default(false)
  taxResident       String[]  @map("tax_resident")
  status            String    @default("PENDING")
  verificationId    String?   @map("verification_id")
  confidence        Float?
  rejectionReasons  String[]  @map("rejection_reasons") @default([])
  verifiedAt        DateTime? @map("verified_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("kyc_submissions")
}

model EscrowTransaction {
  id              String    @id @default(cuid())
  investmentId    String    @unique @map("investment_id")
  depositId       String?   @map("deposit_id")
  amount          Float
  currency        String    @default("EUR")
  status          String    @default("CREATED")
  blockchainTxHash String?  @map("blockchain_tx_hash")
  releaseTime     DateTime  @map("release_time")
  releasedAt      DateTime? @map("released_at")
  refundedAt      DateTime? @map("refunded_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  investment Investment @relation(fields: [investmentId], references: [id])

  @@map("escrow_transactions")
}